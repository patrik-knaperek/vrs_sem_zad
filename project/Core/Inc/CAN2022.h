/** 
  ******************************************************************************
  * @file    CAN2022.h
  * @author  SGT Generated by tool
  * @version V0.1.0 (generator)
  * @date    8-September-2022
  * @brief   CAN protocol application/PROFILE layer for use in SGT formula student electric 2022
  ******************************************************************************
    Header contains all CAN bus message structures and defines of signals
    for STUBA Green Team formula 2015 created by Marek Laszlo and Marius Rak
  ******************************************************************************
  Do not change document and messages structure!

  HOW TO RECEIVE:
  -do your init of CAN device in main.c
  -define used structures by uncommenting in CAN2022.h
  -use extern for CAN2022.h data structures in your main.c file
  -send messages using declared functions. Received structures are saved automatically in receive structures
  -work with data from structure :)

  HOW TO TRANSMIT:
  -fill structure of message you want to send
  -call correspondent transmit function which will fill the TX  message structure and transmit

  ******************************************************************************/
#ifndef CAN2022_H_
#define CAN2022_H_

#include "stm32f1xx_hal.h"

#define Tx_MCU_IMU_angular_velocity 1
//#define Rx_MCU_IMU_angular_velocity 1
#define ID_MCU_IMU_angular_velocity 0x260
#define DLC_MCU_IMU_angular_velocity 8
/* MCU_IMU_angular_velocity
 * 60/64 bits
 *
 * ID 0x260
 * Message size DLC: 7 bytes
 * Message is sent by node: 
 * Message contains:
 *                   rep start len type        comment
 * gyrX             | A |  0 | 20 |  int32_t | 
 * gyrY             | B | 20 | 20 |  int32_t | 
 * gyrZ             | C | 40 | 20 |  int32_t | 
 */

//             bit
//     |7|6|5|4|3|2|1|0|
//   |0|A|A|A|A|A|A|A|A|
//   |1|A|A|A|A|A|A|A|A|
// b |2|A|A|A|A|B|B|B|B|
// y |3|B|B|B|B|B|B|B|B|
// t |4|B|B|B|B|B|B|B|B|
// e |5|C|C|C|C|C|C|C|C|
//   |6|C|C|C|C|C|C|C|C|
//   |7|C|C|C|C| | | | |
typedef struct
{
    int32_t gyrX;
    int32_t gyrY;
    int32_t gyrZ;
} MCU_IMU_angular_velocity_TypeDef;

#ifdef Tx_MCU_IMU_angular_velocity
void Tx_MCU_IMU_angular_velocity_Data(CAN_HandleTypeDef* hcan, MCU_IMU_angular_velocity_TypeDef* MCU_IMU_angular_velocity_Data);
#endif

#define Tx_MCU_IMU_acceleration 1
//#define Rx_MCU_IMU_acceleration 1
#define ID_MCU_IMU_acceleration 0x270
#define DLC_MCU_IMU_acceleration 8
/* MCU_IMU_acceleration
 * 
 *
 * ID 0x270
 * Message size DLC: 7 bytes
 * Message is sent by node: 
 * Message contains:
 *                   rep start len type        comment
 * accX             | A |  0 | 20 |  int32_t | 
 * accY             | B | 20 | 20 |  int32_t | 
 * accZ             | C | 40 | 20 |  int32_t | 
 */

//             bit
//     |7|6|5|4|3|2|1|0|
//   |0|A|A|A|A|A|A|A|A|
//   |1|A|A|A|A|A|A|A|A|
// b |2|A|A|A|A|B|B|B|B|
// y |3|B|B|B|B|B|B|B|B|
// t |4|B|B|B|B|B|B|B|B|
// e |5|C|C|C|C|C|C|C|C|
//   |6|C|C|C|C|C|C|C|C|
//   |7|C|C|C|C| | | | |
typedef struct
{
    int32_t accX;
    int32_t accY;
    int32_t accZ;
} MCU_IMU_acceleration_TypeDef;

#ifdef Tx_MCU_IMU_acceleration
void Tx_MCU_IMU_acceleration_Data(CAN_HandleTypeDef* hcan, MCU_IMU_acceleration_TypeDef* MCU_IMU_acceleration_Data);
#endif

#define Tx_MCU_IMU_euler_angles 1
//#define Rx_MCU_IMU_euler_angles 1
#define ID_MCU_IMU_euler_angles 0x280
#define DLC_MCU_IMU_euler_angles 8
/* MCU_IMU_euler_angles
 * 
 *
 * ID 0x280
 * Message size DLC: 7 bytes
 * Message is sent by node: 
 * Message contains:
 *                   rep start len type        comment
 * roll             | A |  0 | 20 |  int32_t | 
 * pitch            | B | 20 | 20 |  int32_t | 
 * yaw              | C | 40 | 20 |  int32_t | 
 */

//             bit
//     |7|6|5|4|3|2|1|0|
//   |0|A|A|A|A|A|A|A|A|
//   |1|A|A|A|A|A|A|A|A|
// b |2|A|A|A|A|B|B|B|B|
// y |3|B|B|B|B|B|B|B|B|
// t |4|B|B|B|B|B|B|B|B|
// e |5|C|C|C|C|C|C|C|C|
//   |6|C|C|C|C|C|C|C|C|
//   |7|C|C|C|C| | | | |
typedef struct
{
    int32_t roll;
    int32_t pitch;
    int32_t yaw;
} MCU_IMU_euler_angles_TypeDef;

#ifdef Tx_MCU_IMU_euler_angles
void Tx_MCU_IMU_euler_angles_Data(CAN_HandleTypeDef* hcan, MCU_IMU_euler_angles_TypeDef* MCU_IMU_euler_angles_Data);
#endif

#define Tx_MCU_IMU_gps_position 1
//#define Rx_MCU_IMU_gps_position 1
#define ID_MCU_IMU_gps_position 0x300
#define DLC_MCU_IMU_gps_position 8
/* MCU_IMU_gps_position
 *
 *
 * ID 0x300
 * Message size DLC: 8 bytes
 * Message is sent by node:
 * Message contains:
 *                   rep start len type        comment
 * lat              | A |  0 | 32 | uint32_t |
 * longitude        | B | 32 | 32 | uint32_t |
 */

//             bit
//     |7|6|5|4|3|2|1|0|
//   |0|A|A|A|A|A|A|A|A|
//   |1|A|A|A|A|A|A|A|A|
// b |2|A|A|A|A|A|A|A|A|
// y |3|A|A|A|A|A|A|A|A|
// t |4|B|B|B|B|B|B|B|B|
// e |5|B|B|B|B|B|B|B|B|
//   |6|B|B|B|B|B|B|B|B|
//   |7|B|B|B|B|B|B|B|B|
typedef struct
{
    uint32_t lat;
    uint32_t longitude;
} MCU_IMU_gps_position_TypeDef;

#ifdef Tx_MCU_IMU_gps_position
void Tx_MCU_IMU_gps_position_Data(CAN_HandleTypeDef* hcan, MCU_IMU_gps_position_TypeDef* MCU_IMU_gps_position_Data);
#endif

#define Tx_MCU_IMU_gps_speed 1
//#define Rx_MCU_IMU_gps_speed 1
#define ID_MCU_IMU_gps_speed 0x305
#define DLC_MCU_IMU_gps_speed 2
/* MCU_IMU_gps_speed
 *
 *
 * ID 0x305
 * Message size DLC: 2 bytes
 * Message is sent by node:
 * Message contains:
 *                   rep start len type        comment
 * gps_velocity     | A |  0 | 16 | uint16_t |
 */

//             bit
//     |7|6|5|4|3|2|1|0|
//   |0|A|A|A|A|A|A|A|A|
//   |1|A|A|A|A|A|A|A|A|
// b |2| | | | | | | | |
// y |3| | | | | | | | |
// t |4| | | | | | | | |
// e |5| | | | | | | | |
//   |6| | | | | | | | |
//   |7| | | | | | | | |
typedef struct
{
    uint16_t gps_velocity;
} MCU_IMU_gps_speed_TypeDef;

#ifdef Tx_MCU_IMU_gps_speed
void Tx_MCU_IMU_gps_speed_Data(CAN_HandleTypeDef* hcan, MCU_IMU_gps_speed_TypeDef* MCU_IMU_gps_speed_Data);
#endif


#endif /* CAN2016_H_ */
